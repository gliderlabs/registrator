package main

import (
	"log"
	"net"
	"net/url"
	"strconv"

	"github.com/coreos/go-etcd/etcd"
)

type VulcandRegistry struct {
	client *etcd.Client
	path   string
}

func NewVulcandRegistry(uri *url.URL) ServiceRegistry {
	urls := make([]string, 0)
	if uri.Host != "" {
		urls = append(urls, "http://"+uri.Host)
	}
	path := uri.Path
	if len(uri.Path) <= 1 {
		log.Println("registrator: vulcand: no path in url. Using '/vulcand'")
		path = "/vulcand"
	}
	return &VulcandRegistry{client: etcd.NewClient(urls), path: path}
}

func (r *VulcandRegistry) Register(service *Service) error {
	backend_path := r.path + "/backends/" + service.Name + "/backend"
	_, backend_err := r.client.Create(backend_path, "{\"Type\": \"http\"}", 0)
	if backend_err == nil {
		log.Println("registrator: vulcand: autogenerated backend:", service.Name)
	}

	path := r.path + "/backends/" + service.Name + "/servers/" + service.ID
	port := strconv.Itoa(service.Port)
	addr := "{\"URL\": \"http://" + net.JoinHostPort(service.IP, port) + "\"}"
	_, err := r.client.Set(path, addr, uint64(service.TTL))
	if err != nil {
		log.Println("registrator: vulcand: failed to register service:", err)
	}
	return err
}

func (r *VulcandRegistry) Deregister(service *Service) error {
	path := r.path + "/backends/" + service.Name + "/servers/" + service.ID
	_, err := r.client.Delete(path, false)
	if err != nil {
		log.Println("registrator: vulcand: failed to register service:", err)
	}
	return err
}

func (r *VulcandRegistry) Refresh(service *Service) error {
	return r.Register(service)
}
